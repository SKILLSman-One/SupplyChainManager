import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
// Main class to run the program
public class SupplyChainSystemGUI {
    public static void main(String[] args) {
        MainFrame frame = new MainFrame();
        frame.setVisible(true);
    }
}
class InputMaterial {
    Producer producer;
    int amount;

    public InputMaterial(Producer producer, int amount) {
        this.producer = producer;
        this.amount = amount;
    }

    public String toString() {
        return producer.name + " x" + amount;
    }
}

class Customer {
    String name;
    double balance;
    Map<String, Integer> inventory = new HashMap<>();

    public Customer(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    public void addProduct(String product, int amount) {
        inventory.put(product, inventory.getOrDefault(product, 0) + amount);
    }

    public String toString() {
        return name + " (Balance: " + String.format("%.2f", balance) + ")";
    }
}


class Market {
    String name;
    double balance;
    Map<String, Integer> stock = new HashMap<>();
    Map<String, Double> prices = new HashMap<>();

    public Market(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    public void buyProduct(String product, int amount, double pricePerUnit, FactoryExtended factory) {
        if (!factory.products.containsKey(product)) return;

        InventoryItem item = factory.products.get(product);
        if (item.quantity < amount) return;

        double totalCost = amount * pricePerUnit;
        if (balance < totalCost) return;

        item.quantity -= amount;
        balance -= totalCost;

        stock.put(product, stock.getOrDefault(product, 0) + amount);
    }

    public void setPrice(String product, double price) {
        prices.put(product, price);
    }

    public double getPrice(String product) {
        return prices.getOrDefault(product, 0.0);
    }

    public String toString() {
        return name;
    }
}

class EditCustomerDialog extends JDialog {
    public EditCustomerDialog(JFrame parent, Customer customer, java.util.List<Market> markets) {
        super(parent, "Edit Customer", true);
        setSize(300, 150);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JLabel nameLabel = new JLabel("Name: " + customer.name);
        JLabel balanceLabel = new JLabel("Balance: " + String.format("%.2f", customer.balance));
        JButton shopBtn = new JButton("Shop");
        JButton inventoryBtn = new JButton("View Inventory");

        JPanel top = new JPanel(new GridLayout(2, 1));
        top.add(nameLabel);
        top.add(balanceLabel);

        JPanel bottom = new JPanel();
        bottom.add(shopBtn);
        bottom.add(inventoryBtn);

        shopBtn.addActionListener(e -> new ShopDialog(parent, customer, markets).setVisible(true));
        inventoryBtn.addActionListener(e -> new CustomerInventoryDialog(parent, customer).setVisible(true));

        add(top, BorderLayout.CENTER);
        add(bottom, BorderLayout.SOUTH);
    }
}

class ShopDialog extends JDialog {
    public ShopDialog(JFrame parent, Customer customer, java.util.List<Market> markets) {
        super(parent, "Shop", true);
        setSize(400, 250);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JLabel balanceLabel = new JLabel("Balance: " + String.format("%.2f", customer.balance));
        JComboBox<String> productSelector = new JComboBox<>();
        Map<String, Market> productMarketMap = new HashMap<>();

        for (Market m : markets) {
            for (Map.Entry<String, Integer> entry : m.stock.entrySet()) {
                String label = entry.getKey() + " (" + m.name + ")";
                productSelector.addItem(label);
                productMarketMap.put(label, m);
            }
        }

        JLabel stockLabel = new JLabel("Stock: -");
        JTextField amountField = new JTextField(5);
        JButton buyBtn = new JButton("Buy");

        productSelector.addActionListener(e -> {
            String selected = (String) productSelector.getSelectedItem();
            if (selected == null) return;
            Market m = productMarketMap.get(selected);
            String product = selected.split(" \\(")[0];
            int stock = m.stock.getOrDefault(product, 0);
            stockLabel.setText("Stock: " + stock);
        });

        buyBtn.addActionListener(e -> {
            String selected = (String) productSelector.getSelectedItem();
            if (selected == null) return;
            Market m = productMarketMap.get(selected);
            String product = selected.split(" \\(")[0];

            try {
                int amount = Integer.parseInt(amountField.getText());
                int available = m.stock.getOrDefault(product, 0);
                double price = m.getPrice(product);
                double total = price * amount;

                if (amount <= 0 || amount > available) {
                    JOptionPane.showMessageDialog(this, "Invalid amount.");
                    return;
                }
                if (customer.balance < total) {
                    JOptionPane.showMessageDialog(this, "Not enough balance.");
                    return;
                }

                customer.balance -= total;
                m.stock.put(product, available - amount);
                customer.addProduct(product, amount);

                balanceLabel.setText("Balance: " + String.format("%.2f", customer.balance));
                stockLabel.setText("Stock: " + (available - amount));
                JOptionPane.showMessageDialog(this, "Purchase successful.");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input.");
            }
        });

        JPanel center = new JPanel(new GridLayout(3, 2, 5, 5));
        center.add(new JLabel("Select Product:"));
        center.add(productSelector);
        center.add(stockLabel);
        center.add(new JLabel("Buy Amount:"));
        center.add(amountField);
        center.add(buyBtn);

        add(balanceLabel, BorderLayout.NORTH);
        add(center, BorderLayout.CENTER);
    }
}


class CustomerInventoryDialog extends JDialog {
    public CustomerInventoryDialog(JFrame parent, Customer customer) {
        super(parent, "Inventory of " + customer.name, true);
        setSize(400, 300);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JTextArea area = new JTextArea();
        area.setEditable(false);
        StringBuilder sb = new StringBuilder();
        sb.append("Balance: ").append(String.format("%.2f", customer.balance)).append("\n\n");
        sb.append("Inventory:\n");
        for (Map.Entry<String, Integer> entry : customer.inventory.entrySet()) {
            sb.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }

        area.setText(sb.toString());
        add(new JScrollPane(area), BorderLayout.CENTER);
    }
}

class AddMarketDialog extends JDialog {
    public AddMarketDialog(JFrame parent, java.util.List<Market> markets, Runnable updateCallback) {
        super(parent, "Add New Market", true);
        setSize(300, 200);
        setLocationRelativeTo(parent);
        setLayout(new GridLayout(3, 2, 5, 5));

        JTextField nameField = new JTextField();
        JTextField balanceField = new JTextField();

        add(new JLabel("Market Name:"));
        add(nameField);
        add(new JLabel("Initial Balance:"));
        add(balanceField);

        JButton addBtn = new JButton("Add");
        add(new JLabel()); // spacer
        add(addBtn);

        addBtn.addActionListener(e -> {
            try {
                String name = nameField.getText();
                double balance = Double.parseDouble(balanceField.getText());
                if (name.isEmpty() || balance < 0) throw new Exception();
                markets.add(new Market(name, balance));
                updateCallback.run();
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input.");
            }
        });
    }
}
class EditMarketPanel extends JPanel {
    public EditMarketPanel(JFrame parent, Market market, java.util.List<FactoryExtended> factories) {
        setLayout(new BorderLayout());

        JLabel balanceLabel = new JLabel("Balance: " + market.balance);
        JComboBox<String> productSelector = new JComboBox<>();
        JLabel stockLabel = new JLabel("Stock Quantity: -");

        // Populate productSelector from factory products
        Set<String> factoryProducts = new HashSet<>();
        for (FactoryExtended f : factories) {
            factoryProducts.addAll(f.products.keySet());
        }
        for (String product : factoryProducts) {
            productSelector.addItem(product);
        }

        JTextField amountField = new JTextField(5);
        JButton buyButton = new JButton("Buy");

        JTextField priceField = new JTextField(5);
        JButton updatePriceButton = new JButton("Update Price");

        productSelector.addActionListener(e -> {
            String selected = (String) productSelector.getSelectedItem();
            int total = 0;
            for (FactoryExtended f : factories) {
                InventoryItem item = f.products.get(selected);
                if (item != null) total += item.quantity;
            }
            stockLabel.setText("Stock Quantity: " + total);
        });

        buyButton.addActionListener(e -> {
            String selected = (String) productSelector.getSelectedItem();
            int amount;
            try {
                amount = Integer.parseInt(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(parent, "Invalid amount.");
                return;
            }

            // Try to find factory that can sell
            for (FactoryExtended f : factories) {
                InventoryItem item = f.products.get(selected);
                if (item != null && item.quantity >= amount) {
                    double costPerUnit = 0;
                    for (ProductDesign d : f.designs) {
                        if (d.name.equals(selected)) {
                            costPerUnit = d.cost;
                            break;
                        }
                    }
                    double totalCost = costPerUnit * amount;
                    if (market.balance < totalCost) {
                        JOptionPane.showMessageDialog(parent, "Market does not have enough balance.");
                        return;
                    }
                    market.buyProduct(selected, amount, costPerUnit, f);
                    balanceLabel.setText("Balance: " + market.balance);
                    productSelector.setSelectedItem(selected);
                    return;
                }
            }
            JOptionPane.showMessageDialog(parent, "Not enough stock in factories.");
        });

        updatePriceButton.addActionListener(e -> {
            String selected = (String) productSelector.getSelectedItem();
            try {
                double price = Double.parseDouble(priceField.getText());
                market.setPrice(selected, price);
                JOptionPane.showMessageDialog(parent, "Price updated for " + selected);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(parent, "Invalid price.");
            }
        });

        JPanel top = new JPanel(new GridLayout(3, 2, 5, 5));
        top.add(new JLabel("Select Product:"));
        top.add(productSelector);
        top.add(stockLabel);
        top.add(new JLabel("Amount:"));
        top.add(amountField);
        top.add(buyButton);

        JPanel bottom = new JPanel(new FlowLayout());
        bottom.add(new JLabel("Price (for stock):"));
        bottom.add(priceField);
        bottom.add(updatePriceButton);

        add(balanceLabel, BorderLayout.NORTH);
        add(top, BorderLayout.CENTER);
        add(bottom, BorderLayout.SOUTH);
    }
}

class EditMarketDialog extends JDialog {
    public EditMarketDialog(JFrame parent, Market market, java.util.List<Factory> factories) {
        super(parent, "Edit Market: " + market.name, true);
        setSize(400, 300);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JLabel balanceLabel = new JLabel("Balance: " + market.balance);
        JComboBox<String> productBox = new JComboBox<>();
        JLabel stockLabel = new JLabel("Stock Quantity: -");

        // Список только с фабричными товарами
        Set<String> factoryProducts = new HashSet<>();
        for (Factory f : factories) {
            if (f instanceof FactoryExtended) {
                factoryProducts.addAll(((FactoryExtended) f).products.keySet());
            }
        }
        for (String p : factoryProducts) productBox.addItem(p);

        JTextField amountField = new JTextField(5);
        JButton buyBtn = new JButton("Buy");

        JTextField priceField = new JTextField(5);
        JButton updatePriceBtn = new JButton("Update Price");

        productBox.addActionListener(e -> {
            String prod = (String) productBox.getSelectedItem();
            int total = 0;
            for (Factory f : factories) {
                if (f instanceof FactoryExtended) {
                    InventoryItem item = ((FactoryExtended) f).products.get(prod);
                    if (item != null) total += item.quantity;
                }
            }
            stockLabel.setText("Stock Quantity: " + total);
        });

        buyBtn.addActionListener(e -> {
            try {
                String prod = (String) productBox.getSelectedItem();
                int amount = Integer.parseInt(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();

                for (Factory f : factories) {
                    if (f instanceof FactoryExtended) {
                        FactoryExtended fe = (FactoryExtended) f;
                        InventoryItem item = fe.products.get(prod);
                        if (item != null && item.quantity >= amount) {
                            double unitCost = 0;
                            for (ProductDesign d : fe.designs) {
                                if (d.name.equals(prod)) {
                                    unitCost = d.cost;
                                    break;
                                }
                            }

                            double total = amount * unitCost;
                            if (market.balance >= total) {
                                market.buyProduct(prod, amount, unitCost, fe);
                                balanceLabel.setText("Balance: " + market.balance);
                                productBox.setSelectedItem(prod);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "Not enough balance.");
                                return;
                            }
                        }
                    }
                }

                JOptionPane.showMessageDialog(this, "Not enough stock.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount.");
            }
        });

        updatePriceBtn.addActionListener(e -> {
            try {
                String prod = (String) productBox.getSelectedItem();
                double price = Double.parseDouble(priceField.getText());
                market.setPrice(prod, price);
                JOptionPane.showMessageDialog(this, "Price updated.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid price.");
            }
        });

        JPanel top = new JPanel();
        top.setLayout(new BoxLayout(top, BoxLayout.Y_AXIS));

        JPanel row1 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        row1.add(new JLabel("Select Product:"));
        row1.add(productBox);

        JPanel row2 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        row2.add(stockLabel);

        JPanel row3 = new JPanel(new FlowLayout(FlowLayout.LEFT));
        row3.add(new JLabel("Amount:"));
        row3.add(amountField);
        row3.add(buyBtn);

        top.add(row1);
        top.add(row2);
        top.add(row3);

        JPanel bottom = new JPanel(new FlowLayout());
        bottom.add(new JLabel("Price (for stock):"));
        bottom.add(priceField);
        bottom.add(updatePriceBtn);

        add(balanceLabel, BorderLayout.NORTH);
        add(top, BorderLayout.CENTER);
        add(bottom, BorderLayout.SOUTH);
    }
}

class ProductDesign {
    String name;
    double cost;
    String ByProductName;
    int ByProductAmount;
    double ByProductCost;
    ArrayList<InputMaterial> inputs = new ArrayList<>();

    public ProductDesign(String name, double cost, String ByProductName, int ByProductAmount, double ByProductCost) {
        this.name = name;
        this.cost = cost;
        this.ByProductName = ByProductName;
        this.ByProductAmount = ByProductAmount;
        this.ByProductCost = ByProductCost;
    }

    public void addInput(InputMaterial input) {
        inputs.add(input);
    }

    public String toString() {
        return name;
    }
}

class InventoryItem {
    String name;
    int quantity;

    public InventoryItem(String name, int quantity) {
        this.name = name;
        this.quantity = quantity;
    }
}

class FactoryExtended extends Factory {
    ArrayList<ProductDesign> designs = new ArrayList<>();
    Map<String, InventoryItem> products = new HashMap<>();
    Map<String, InventoryItem> ByProducts = new HashMap<>();

    public FactoryExtended(String name, double balance, int capacity) {
        super(name, balance, capacity);
    }

    public void addDesign(ProductDesign d) {
        designs.add(d);
    }

    public void produce(ProductDesign d, int amount) {
        // Обновление основной продукции
        products.putIfAbsent(d.name, new InventoryItem(d.name, 0));
        products.get(d.name).quantity += amount;

        // Обновление побочной продукции
        ByProducts.putIfAbsent(d.ByProductName, new InventoryItem(d.ByProductName, 0));
        ByProducts.get(d.ByProductName).quantity += d.ByProductAmount * amount;
    }

    public void destroyByProduct(String name, int amount) {
        InventoryItem item = ByProducts.get(name);
        if (item != null && item.quantity >= amount) {
            item.quantity -= amount;
            balance -= amount * getByProductCost(name);
        }
    }

    public double getByProductCost(String name) {
        for (ProductDesign d : designs) {
            if (d.ByProductName.equals(name)) return d.ByProductCost;
        }
        return 0;
    }
}

// Диалоговое окно для создания дизайна
class CreateDesignDialog extends JDialog {
    private JTextField productNameField = new JTextField(10);
    private JTextField productCostField = new JTextField(10);
    private JTextField ByProductNameField = new JTextField(10);
    private JTextField ByProductAmountField = new JTextField(10);
    private JTextField ByProductCostField = new JTextField(10);
    private JComboBox<Producer> materialSelector;
    private JLabel stockLabel = new JLabel("Stock: -");
    private JLabel selectedStockLabel = new JLabel("Selected Stock: -");  // New label for selected material stock
    private JTextField inputAmountField = new JTextField(5);
    private DefaultListModel<String> inputListModel = new DefaultListModel<>();
    private ArrayList<InputMaterial> inputs = new ArrayList<>();

    public CreateDesignDialog(JFrame parent, ArrayList<Producer> producers, FactoryExtended factory) {
        super(parent, "Create Design", true);
        setSize(500, 550);  // Increased height to accommodate new component
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JPanel fields = new JPanel(new GridLayout(6, 2, 5, 5));
        fields.add(new JLabel("Product Name:"));
        fields.add(productNameField);
        fields.add(new JLabel("Product Cost:"));
        fields.add(productCostField);
        fields.add(new JLabel("Byproduct Name:"));
        fields.add(ByProductNameField);
        fields.add(new JLabel("Byproduct Amount:"));
        fields.add(ByProductAmountField);
        fields.add(new JLabel("Byproduct Cost:"));
        fields.add(ByProductCostField);

        JPanel inputPanel = new JPanel(new GridLayout(3, 1, 5, 5));  // Changed to GridLayout
        JPanel materialSelectionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        materialSelector = new JComboBox<>(producers.toArray(new Producer[0]));
        materialSelectionPanel.add(new JLabel("Material:"));
        materialSelectionPanel.add(materialSelector);
        materialSelectionPanel.add(stockLabel);

        JPanel amountPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        amountPanel.add(new JLabel("Input Amount:"));
        amountPanel.add(inputAmountField);
        JButton addInputButton = new JButton("Add Input");
        amountPanel.add(addInputButton);

        JPanel selectedStockPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        selectedStockPanel.add(selectedStockLabel);

        inputPanel.add(materialSelectionPanel);
        inputPanel.add(amountPanel);
        inputPanel.add(selectedStockPanel);

        JList<String> inputList = new JList<>(inputListModel);
        JScrollPane inputScroll = new JScrollPane(inputList);
        inputScroll.setPreferredSize(new Dimension(100, 50)); // ← МЕНЬШИЙ размер

// Обработка кнопки "Add Input"
        addInputButton.addActionListener(e -> {
            try {
                Producer p = (Producer) materialSelector.getSelectedItem();
                int amount = Integer.parseInt(inputAmountField.getText());
                if (amount <= 0) throw new NumberFormatException();
                inputs.add(new InputMaterial(p, amount));
                inputListModel.addElement(p.name + " x" + amount);
                updateSelectedStockDisplay();  // Обновляем отображение
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input amount.");
            }
        });

        materialSelector.addActionListener(e -> {
            Producer p = (Producer) materialSelector.getSelectedItem();
            InventoryItem item = factory.products.get(p.name);
            int stock = (item != null) ? item.quantity : 0;
            stockLabel.setText("Stock: " + stock);
            updateSelectedStockDisplay();
        });

        inputList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                updateSelectedStockDisplay();
            }
        });

        JPanel bottom = new JPanel();
        JButton saveButton = new JButton("Save Design");
        bottom.add(saveButton);


        saveButton.addActionListener(e -> {
            try {
                String pname = productNameField.getText();
                double pcost = Double.parseDouble(productCostField.getText());
                String bname = ByProductNameField.getText();
                int bamount = Integer.parseInt(ByProductAmountField.getText());
                double bcost = Double.parseDouble(ByProductCostField.getText());
                ProductDesign design = new ProductDesign(pname, pcost, bname, bamount, bcost);
                for (InputMaterial im : inputs) design.addInput(im);
                factory.addDesign(design);
                JOptionPane.showMessageDialog(this, "Design saved successfully.");
                dispose();
                if (parent instanceof MainFrame) {
                    ((MainFrame) parent).updateFactoryInfo();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error saving design. Check fields.");
            }
        });

        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BorderLayout());
        centerPanel.add(inputPanel, BorderLayout.NORTH);
        centerPanel.add(inputScroll, BorderLayout.CENTER);

        add(fields, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
        add(bottom, BorderLayout.SOUTH);

    }

    // Helper method to update the selected stock display
    private void updateSelectedStockDisplay() {
        int selectedIndex = inputListModel.size() - 1; // Default to last added
        if (selectedIndex >= 0) {
            String selected = inputListModel.getElementAt(selectedIndex);
            selectedStockLabel.setText("Selected Stock: " + selected);
        } else {
            selectedStockLabel.setText("Selected Stock: -");
        }
    }
}

// Диалоговое окно для производства продукта
class ManufactureDialog extends JDialog {
    public ManufactureDialog(JFrame parent, FactoryExtended factory) {
        super(parent, "Manufacture Product", true);
        setSize(400, 300);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JComboBox<ProductDesign> designSelector = new JComboBox<>(factory.designs.toArray(new ProductDesign[0]));
        JTextField amountField = new JTextField(10);

        JPanel center = new JPanel(new GridLayout(2, 2, 5, 5));
        center.add(new JLabel("Select Design:"));
        center.add(designSelector);
        center.add(new JLabel("Amount to Produce:"));
        center.add(amountField);

        JButton produceBtn = new JButton("Produce");

        produceBtn.addActionListener(e -> {
            ProductDesign d = (ProductDesign) designSelector.getSelectedItem();
            try {
                int amount = Integer.parseInt(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();

                // Проверка входных материалов
                for (InputMaterial input : d.inputs) {
                    InventoryItem item = factory.products.get(input.producer.name);
                    if (item == null || item.quantity < input.amount * amount) {
                        JOptionPane.showMessageDialog(this, "Not enough stock in factory for: " + input.producer.name);
                        return;
                    }
                }

                // Проверка средств
                double totalCost = d.cost * amount;
                if (factory.balance < totalCost) {
                    JOptionPane.showMessageDialog(this, "Not enough balance.");
                    return;
                }

                // Списание ресурсов
                for (InputMaterial input : d.inputs) {
                    factory.products.get(input.producer.name).quantity -= input.amount * amount;
                }
                factory.balance -= totalCost;

                // Производство продукта
                factory.produce(d, amount);
                if (parent instanceof MainFrame) {
                    ((MainFrame) parent).updateFactoryInfo();
                }
                JOptionPane.showMessageDialog(this, "Production successful.");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount.");
            }
        });

        add(center, BorderLayout.CENTER);
        add(produceBtn, BorderLayout.SOUTH);
    }
}

// Диалог просмотра инвентаря
class InventoryDialog extends JDialog {
    public InventoryDialog(JFrame parent, FactoryExtended factory) {
        super(parent, "Factory Inventory", true);
        setSize(400, 400);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JTextArea area = new JTextArea();
        area.setEditable(false);

        StringBuilder sb = new StringBuilder();
        sb.append("Products:\n");
        for (InventoryItem item : factory.products.values()) {
            sb.append(item.name).append(" - ").append(item.quantity).append("\n");
        }
        sb.append("\nByproducts:\n");
        for (InventoryItem item : factory.ByProducts.values()) {
            sb.append(item.name).append(" - ").append(item.quantity).append("\n");
        }

        area.setText(sb.toString());
        add(new JScrollPane(area), BorderLayout.CENTER);
    }
}

// Диалог удаления побочных продуктов
class DestroyByProductDialog extends JDialog {
    public DestroyByProductDialog(JFrame parent, FactoryExtended factory) {
        super(parent, "Destroy Byproduct", true);
        setSize(400, 250);
        setLocationRelativeTo(parent);
        setLayout(new BorderLayout());

        JComboBox<String> ByProductSelector = new JComboBox<>(factory.ByProducts.keySet().toArray(new String[0]));
        JTextField amountField = new JTextField(10);

        JPanel center = new JPanel(new GridLayout(2, 2, 5, 5));
        center.add(new JLabel("Select Byproduct:"));
        center.add(ByProductSelector);
        center.add(new JLabel("Amount:"));
        center.add(amountField);

        JButton destroyBtn = new JButton("Destroy");

        destroyBtn.addActionListener(e -> {
            String name = (String) ByProductSelector.getSelectedItem();
            try {
                int amount = Integer.parseInt(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();

                InventoryItem item = factory.ByProducts.get(name);
                if (item == null || item.quantity < amount) {
                    JOptionPane.showMessageDialog(this, "Not enough to destroy.");
                    return;
                }

                double cost = factory.getByProductCost(name) * amount;
                if (factory.balance < cost) {
                    JOptionPane.showMessageDialog(this, "Not enough balance to destroy.");
                    return;
                }

                factory.destroyByProduct(name, amount);
                JOptionPane.showMessageDialog(this, "Byproducts destroyed.");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid amount.");
            }
        });

        add(center, BorderLayout.CENTER);
        add(destroyBtn, BorderLayout.SOUTH);
    }
}
// Подключение окон к кнопкам

class FactoryPanelHelper {
    public static void connectExtendedFactoryButtons(
            JFrame parentFrame,
            JPanel actionsPanel,
            FactoryExtended factory,
            ArrayList<Producer> producers,
            Runnable updateCallback) {

        actionsPanel.removeAll();
        actionsPanel.setLayout(new BoxLayout(actionsPanel, BoxLayout.Y_AXIS));

        // --- Панель покупки материалов ---
        JPanel buyPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JComboBox<String> selector = new JComboBox<>();
        for (Producer p : producers) selector.addItem(p.name);
        JTextField amountField = new JTextField(10);
        JLabel stockLabel = new JLabel("Stock: -");  // <- Лейбл для отображения stock

        // Обновление stock при выборе продюсера
        selector.addActionListener(e -> {
            int index = selector.getSelectedIndex();
            if (index >= 0 && index < producers.size()) {
                Producer selected = producers.get(index);
                stockLabel.setText("Stock: " + selected.stock);
            }
        });

        JButton buyButton = new JButton("Buy");
        buyButton.addActionListener(e -> {
            int index = selector.getSelectedIndex();
            if (index >= 0 && index < producers.size()) {
                Producer p = producers.get(index);
                try {
                    int amount = Integer.parseInt(amountField.getText());
                    double total = amount * p.price;
                    if (amount > p.stock) {
                        JOptionPane.showMessageDialog(parentFrame, "Not enough stock at producer.");
                    } else if (total > factory.balance) {
                        JOptionPane.showMessageDialog(parentFrame, "Not enough balance.");
                    } else {
                        p.stock -= amount;
                        factory.stock += amount;
                        factory.balance -= total;
                        p.fund += total;

                        factory.products.putIfAbsent(p.name, new InventoryItem(p.name, 0));
                        factory.products.get(p.name).quantity += amount;

                        updateCallback.run();
                        stockLabel.setText("Stock: " + p.stock);  // <- Обновляем после покупки
                        JOptionPane.showMessageDialog(parentFrame, "Material bought and added to inventory.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(parentFrame, "Invalid input.");
                }
            }
        });

        buyPanel.add(new JLabel("Select Material:"));
        buyPanel.add(selector);
        buyPanel.add(new JLabel("Amount:"));
        buyPanel.add(amountField);
        buyPanel.add(buyButton);
        buyPanel.add(stockLabel);  // <- Добавлен лейбл
        actionsPanel.add(buyPanel);

        // --- Кнопки действий фабрики ---
        JButton createDesignBtn = new JButton("Create Design");
        JButton produceProductBtn = new JButton("Manufacturing");
        JButton inventoryBtn = new JButton("View Inventory");
        JButton destroyByProductBtn = new JButton("Destroy Byproduct");

        createDesignBtn.addActionListener(e -> new CreateDesignDialog(parentFrame, producers, factory).setVisible(true));
        produceProductBtn.addActionListener(e -> new ManufactureDialog(parentFrame, factory).setVisible(true));
        inventoryBtn.addActionListener(e -> new InventoryDialog(parentFrame, factory).setVisible(true));
        destroyByProductBtn.addActionListener(e -> new DestroyByProductDialog(parentFrame, factory).setVisible(true));

        actionsPanel.add(createDesignBtn);
        actionsPanel.add(produceProductBtn);
        actionsPanel.add(inventoryBtn);
        actionsPanel.add(destroyByProductBtn);
    }
}



// Basic producer class
class Producer {
    String name;
    double cost;
    double price;
    int capacity;
    double fund;
    int stock;

    public Producer(String name, double cost, double price, int capacity, double fund) {
        this.name = name;
        this.cost = cost;
        this.price = price;
        this.capacity = capacity;
        this.fund = fund;
        this.stock = 0;
    }

    public String toString() {
        return name;
    }
}
class Factory {
    String name;
    double balance;
    int capacity;
    int stock;

    public Factory(String name, double balance, int capacity) {
        this.name = name;
        this.balance = balance;
        this.capacity = capacity;
        this.stock = 0;
    }
}

// Main frame for the application
class MainFrame extends JFrame {
    ArrayList<Producer> producers = new ArrayList<>();
    ArrayList<Factory> factories = new ArrayList<>();
    ArrayList<Market> markets = new ArrayList<>();
    Market selectedMarket;
    ArrayList<Customer> customers = new ArrayList<>();
    Customer selectedCustomer;


    JPanel mainPanel, producerPanel, editPanel;
    JPanel factoryPanel, editFactoryPanel;
    JPanel factoryActionsPanel; // Added panel for factory actions
    JLabel selectedStockLabel;
    Producer selectedProducer;
    Factory selectedFactory;

    JLabel nameLabel, costLabel, priceLabel, capacityLabel, fundLabel, stockLabel;
    JLabel factoryNameLabel, factoryBalanceLabel, factoryCapacityLabel, factoryStockLabel;
    JComboBox<String> producerSelector;
    JTextField buyAmountField;


    public MainFrame() {
        setTitle("Supply Chain System");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        setupPanels();
        showMainMenu();
    }

    // Set up the different panels
    private void setupPanels() {
        // Main menu panel

        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JLabel titleLabel = new JLabel("Supply Chain System", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        mainPanel.add(titleLabel, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(4, 1, 10, 10));

        JButton producerButton = new JButton("Raw Material Producers");
        JButton factoryButton = new JButton("Factories");
        JButton marketButton = new JButton("Markets");
        JButton customerButton = new JButton("Customers");
        selectedStockLabel = new JLabel("Selected Stock: 0");


        buttonPanel.add(producerButton);
        buttonPanel.add(factoryButton);
        buttonPanel.add(marketButton);
        buttonPanel.add(customerButton);


        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        producerButton.addActionListener(e -> showProducerPanel());
        factoryButton.addActionListener(e -> showFactoryPanel());
        marketButton.addActionListener(e -> showMarketPanel());
        customerButton.addActionListener(e -> showCustomerPanel());


        editFactoryPanel = new JPanel(new BorderLayout());
        JButton backBtn = new JButton("Back");
        backBtn.addActionListener(e -> showFactoryPanel());
        JPanel top = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        top.add(backBtn);

        // Create the actions panel for the factory with a more flexible layout
        factoryActionsPanel = new JPanel();
        factoryActionsPanel.setLayout(new BoxLayout(factoryActionsPanel, BoxLayout.Y_AXIS));

        // Create panel for material selection
        JPanel materialSelectionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        producerSelector = new JComboBox<>();
        buyAmountField = new JTextField(10);
        JLabel selectedStockLabel = new JLabel("Selected Stock: -");

        materialSelectionPanel.add(new JLabel("Select Material:"));
        materialSelectionPanel.add(producerSelector);
        materialSelectionPanel.add(new JLabel("Amount:"));
        materialSelectionPanel.add(buyAmountField);
        materialSelectionPanel.add(selectedStockLabel);

        producerSelector.addActionListener(e -> {
            if (producerSelector.getSelectedIndex() >= 0 && producerSelector.getSelectedIndex() < producers.size()) {
                Producer p = producers.get(producerSelector.getSelectedIndex());
                selectedStockLabel.setText("Selected Stock: " + p.stock);
            }
        });

        //Factory panel
        factoryPanel = new JPanel(new BorderLayout());
        JPanel factoryTop = new JPanel(new BorderLayout());
        JLabel factoryTitle = new JLabel("Factories", JLabel.CENTER);
        JButton factoryBack = new JButton("Back");
        factoryTop.add(factoryTitle, BorderLayout.CENTER);
        factoryTop.add(factoryBack, BorderLayout.EAST);
        factoryBack.addActionListener(e -> showMainMenu());

        JPanel factoryListPanel = new JPanel();
        factoryListPanel.setLayout(new BoxLayout(factoryListPanel, BoxLayout.Y_AXIS));
        JScrollPane factoryScroll = new JScrollPane(factoryListPanel);

        JPanel factoryButtons = new JPanel();
        JButton addFactoryButton = new JButton("Add Factory");
        JButton editFactoryButton = new JButton("Edit Factory");
        factoryButtons.add(addFactoryButton);
        factoryButtons.add(editFactoryButton);

        factoryPanel.add(factoryTop, BorderLayout.NORTH);
        factoryPanel.add(factoryScroll, BorderLayout.CENTER);
        factoryPanel.add(factoryButtons, BorderLayout.SOUTH);

        addFactoryButton.addActionListener(e -> {
            JTextField nameField = new JTextField();
            JTextField balanceField = new JTextField();
            JTextField capacityField = new JTextField();
            JPanel panel = new JPanel(new GridLayout(3, 2));
            panel.add(new JLabel("Name:"));
            panel.add(nameField);
            panel.add(new JLabel("Balance:"));
            panel.add(balanceField);
            panel.add(new JLabel("Capacity:"));
            panel.add(capacityField);
            int result = JOptionPane.showConfirmDialog(null, panel, "Add Factory", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    String name = nameField.getText();
                    double balance = Double.parseDouble(balanceField.getText());
                    int capacity = Integer.parseInt(capacityField.getText());
                    FactoryExtended newFactory = new FactoryExtended(name, balance, capacity);
                    factories.add(newFactory);
                    selectedFactory = newFactory;
                    updateFactoryList(factoryListPanel);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Invalid input!");
                }
            }
        });
        editFactoryButton.addActionListener(e -> {
            if (selectedFactory != null) {
                showEditFactoryPanel();
            } else {
                JOptionPane.showMessageDialog(null, "Select a factory first!");
            }
        });
        producerSelector.addActionListener(e -> {
            if (producerSelector.getSelectedIndex() >= 0 && producerSelector.getSelectedIndex() < producers.size()) {
                Producer p = producers.get(producerSelector.getSelectedIndex());
                selectedStockLabel.setText("Selected Stock: " + p.stock);
            }
        });

        updateFactoryList(factoryListPanel);


        // Create the actions panel for the factory
        factoryActionsPanel = new JPanel();
        factoryActionsPanel.setLayout(new GridLayout(6, 1, 5, 5));

        producerSelector = new JComboBox<>();
        buyAmountField = new JTextField(10);

        factoryActionsPanel.add(new JLabel("Select Material:"));
        factoryActionsPanel.add(producerSelector);
        factoryActionsPanel.add(new JLabel("Amount:"));
        factoryActionsPanel.add(buyAmountField);

        JButton buyButton = new JButton("Buy");

        buyButton.addActionListener(e -> {
            int index = producerSelector.getSelectedIndex();
            if (index >= 0 && index < producers.size()) {
                Producer p = producers.get(index);
                try {
                    int amount = Integer.parseInt(buyAmountField.getText());
                    double total = amount * p.price;
                    if (amount > p.stock) {
                        JOptionPane.showMessageDialog(null, "Not enough stock at producer.");
                    } else if (total > selectedFactory.balance) {
                        JOptionPane.showMessageDialog(null, "Not enough balance.");
                    } else {
                        p.stock -= amount;
                        selectedFactory.stock += amount;
                        selectedFactory.balance -= total;
                        updateFactoryInfo();
                        JOptionPane.showMessageDialog(null, "Material bought.");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Invalid input.");
                }
            }
        });

        factoryActionsPanel.add(buyButton);

        factoryNameLabel = new JLabel();
        factoryBalanceLabel = new JLabel();
        factoryCapacityLabel = new JLabel();
        factoryStockLabel = new JLabel();

        JPanel info = new JPanel(new GridLayout(4, 2, 5, 5));
        info.add(new JLabel("Name:"));
        info.add(factoryNameLabel);
        info.add(new JLabel("Balance:"));
        info.add(factoryBalanceLabel);
        info.add(new JLabel("Capacity:"));
        info.add(factoryCapacityLabel);
        info.add(new JLabel("Stock:"));
        info.add(factoryStockLabel);

        editFactoryPanel.add(top, BorderLayout.NORTH);
        editFactoryPanel.add(info, BorderLayout.CENTER);
        editFactoryPanel.add(factoryActionsPanel, BorderLayout.SOUTH);

        // Producer panel
        producerPanel = new JPanel();
        producerPanel.setLayout(new BorderLayout());

        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout());

        JLabel producerTitle = new JLabel("Raw Material Producers", JLabel.CENTER);
        JButton backButton = new JButton("Back");

        topPanel.add(producerTitle, BorderLayout.CENTER);
        topPanel.add(backButton, BorderLayout.EAST);

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                showMainMenu();
            }
        });

        JPanel listPanel = new JPanel();
        listPanel.setLayout(new BoxLayout(listPanel, BoxLayout.Y_AXIS));

        JScrollPane scrollPane = new JScrollPane(listPanel);

        JPanel bottomPanel = new JPanel();
        JButton addButton = new JButton("Add Producer");
        JButton editButton = new JButton("Edit Producer");

        bottomPanel.add(addButton);
        bottomPanel.add(editButton);

        producerPanel.add(topPanel, BorderLayout.NORTH);
        producerPanel.add(scrollPane, BorderLayout.CENTER);
        producerPanel.add(bottomPanel, BorderLayout.SOUTH);

        // Add producer button action
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addProducer();
            }
        });

        // Edit producer button action
        editButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (selectedProducer != null) {
                    showEditPanel();
                } else {
                    JOptionPane.showMessageDialog(null, "Select a producer first!");
                }
            }
        });

        // Edit panel
        editPanel = new JPanel();
        editPanel.setLayout(new BorderLayout());

        JButton editBackButton = new JButton("Back");
        editBackButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                showProducerPanel();
            }
        });

        JPanel editTopPanel = new JPanel();
        editTopPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
        editTopPanel.add(editBackButton);

        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new GridLayout(6, 2, 5, 5));

        nameLabel = new JLabel();
        fundLabel = new JLabel();
        stockLabel = new JLabel();
        capacityLabel = new JLabel();

        infoPanel.add(new JLabel("Name:"));
        infoPanel.add(nameLabel);
        infoPanel.add(new JLabel("Fund:"));
        infoPanel.add(fundLabel);
        infoPanel.add(new JLabel("Stock:"));
        infoPanel.add(stockLabel);
        infoPanel.add(new JLabel("Capacity:"));
        infoPanel.add(capacityLabel);

        JPanel producePanel = new JPanel();
        producePanel.setLayout(new FlowLayout());

        JLabel amountLabel = new JLabel("Amount to produce:");
        JTextField amountField = new JTextField(10);
        JButton produceButton = new JButton("Produce");

        producePanel.add(amountLabel);
        producePanel.add(amountField);
        producePanel.add(produceButton);

        produceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    int amount = Integer.parseInt(amountField.getText());
                    if (amount <= 0) {
                        JOptionPane.showMessageDialog(null, "Enter a positive number!");
                        return;
                    }

                    double totalCost = amount * selectedProducer.cost;

                    if (amount > selectedProducer.capacity) {
                        JOptionPane.showMessageDialog(null, "Not enough capacity!");
                    } else if (totalCost > selectedProducer.fund) {
                        JOptionPane.showMessageDialog(null, "Not enough funds!");
                    } else {
                        selectedProducer.fund -= totalCost;
                        selectedProducer.stock += amount;
                        updateProducerInfo();
                        JOptionPane.showMessageDialog(null, "Produced " + amount + " units!");
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Enter a valid number!");
                }
            }
        });

        editPanel.add(editTopPanel, BorderLayout.NORTH);
        editPanel.add(infoPanel, BorderLayout.CENTER);
        editPanel.add(producePanel, BorderLayout.SOUTH);
    }

    private void updateFactoryList(JPanel panel) {
        panel.removeAll();
        ButtonGroup group = new ButtonGroup();
        for (Factory f : factories) {
            JRadioButton b = new JRadioButton(f.name);
            if (f == selectedFactory) b.setSelected(true);
            b.addActionListener(e -> selectedFactory = f);
            group.add(b);
            panel.add(b);
        }
        panel.revalidate();
        panel.repaint();
    }

    // Show the main menu
    private void showMainMenu() {
        getContentPane().removeAll();
        getContentPane().add(mainPanel);
        revalidate();
        repaint();
    }


    private void showCustomerPanel() {
        JPanel customerPanel = new JPanel(new BorderLayout());
        JLabel title = new JLabel("Customers", JLabel.CENTER);
        JButton back = new JButton("Back");
        JButton addBtn = new JButton("Add New Customer");
        JButton editBtn = new JButton("Edit Customer");
        JButton deleteBtn = new JButton("Delete Customer");

        JPanel top = new JPanel(new BorderLayout());
        top.add(title, BorderLayout.CENTER);
        top.add(back, BorderLayout.EAST);

        JPanel center = new JPanel();
        center.setLayout(new BoxLayout(center, BoxLayout.Y_AXIS));
        ButtonGroup group = new ButtonGroup();
        for (Customer c : customers) {
            JRadioButton btn = new JRadioButton(c.toString());
            if (c == selectedCustomer) btn.setSelected(true);
            btn.addActionListener(e -> {
                selectedCustomer = c;
                // No longer open edit dialog when selected, just set selection
            });
            group.add(btn);
            center.add(btn);
        }

        JPanel bottom = new JPanel();
        bottom.add(addBtn);
        bottom.add(editBtn);
        bottom.add(deleteBtn);

        back.addActionListener(e -> showMainMenu());

        addBtn.addActionListener(e -> {
            JTextField nameField = new JTextField();
            JTextField balanceField = new JTextField();
            JPanel panel = new JPanel(new GridLayout(2, 2));
            panel.add(new JLabel("Name:"));
            panel.add(nameField);
            panel.add(new JLabel("Initial Balance:"));
            panel.add(balanceField);
            int result = JOptionPane.showConfirmDialog(null, panel, "Add Customer", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    String name = nameField.getText();
                    double balance = Double.parseDouble(balanceField.getText());
                    if (name.isEmpty() || balance < 0) throw new Exception();
                    customers.add(new Customer(name, balance));
                    showCustomerPanel();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Invalid input.");
                }
            }
        });

        editBtn.addActionListener(e -> {
            if (selectedCustomer != null) {
                new EditCustomerDialog(this, selectedCustomer, markets).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Select a customer first!");
            }
        });

        deleteBtn.addActionListener(e -> {
            if (selectedCustomer != null) {
                customers.remove(selectedCustomer);
                selectedCustomer = null;
                showCustomerPanel();
            } else {
                JOptionPane.showMessageDialog(this, "Select a customer to delete!");
            }
        });

        customerPanel.add(top, BorderLayout.NORTH);
        customerPanel.add(new JScrollPane(center), BorderLayout.CENTER);
        customerPanel.add(bottom, BorderLayout.SOUTH);

        getContentPane().removeAll();
        getContentPane().add(customerPanel);
        revalidate();
        repaint();
    }

    // Show the producer panel
    private void showProducerPanel() {
        getContentPane().removeAll();
        getContentPane().add(producerPanel);
        updateProducerList();
        revalidate();
        repaint();
    }
    private void showMarketPanel() {
        JPanel marketPanel = new JPanel(new BorderLayout());


        JLabel title = new JLabel("Markets", JLabel.CENTER);
        JButton back = new JButton("Back");
        JButton addBtn = new JButton("Add New Market");
        JButton editBtn = new JButton("Edit Market");

        JPanel top = new JPanel(new BorderLayout());
        top.add(title, BorderLayout.CENTER);
        top.add(back, BorderLayout.EAST);

        back.addActionListener(e -> showMainMenu());

        JPanel center = new JPanel();
        center.setLayout(new BoxLayout(center, BoxLayout.Y_AXIS));
        ButtonGroup group = new ButtonGroup();
        for (Market m : markets) {
            JRadioButton btn = new JRadioButton(m.name);
            if (m == selectedMarket) btn.setSelected(true);
            btn.addActionListener(e -> {
                selectedMarket = m;
                // No longer auto-open market dialog when clicked, just set selection
            });
            group.add(btn);
            center.add(btn);
        }

        JPanel bottom = new JPanel();
        bottom.add(addBtn);
        bottom.add(editBtn);

        addBtn.addActionListener(e -> {
            new AddMarketDialog(this, markets, () -> showMarketPanel()).setVisible(true);
        });

        editBtn.addActionListener(e -> {
            if (selectedMarket != null) {
                new EditMarketDialog(this, selectedMarket, factories).setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Select a market first!");
            }
        });

        marketPanel.add(top, BorderLayout.NORTH);
        marketPanel.add(new JScrollPane(center), BorderLayout.CENTER);
        marketPanel.add(bottom, BorderLayout.SOUTH);


        getContentPane().removeAll();
        getContentPane().add(marketPanel);
        revalidate();
        repaint();
    }

    private void showFactoryPanel() {
        getContentPane().removeAll();
        getContentPane().add(factoryPanel);
        revalidate();
        repaint();
    }

    private void showEditFactoryPanel() {
        getContentPane().removeAll();
        getContentPane().add(editFactoryPanel);
        updateFactoryInfo();
        updateProducerSelector();

        // Convert to extended factory if needed
        if (!(selectedFactory instanceof FactoryExtended)) {
            int idx = factories.indexOf(selectedFactory);
            FactoryExtended extFactory = new FactoryExtended(
                    selectedFactory.name,
                    selectedFactory.balance,
                    selectedFactory.capacity
            );
            extFactory.stock = selectedFactory.stock;
            factories.set(idx, extFactory);
            selectedFactory = extFactory;
        }

        factoryActionsPanel.removeAll();

        // Use the helper to add all controls
        FactoryPanelHelper.connectExtendedFactoryButtons(
                this,
                factoryActionsPanel,
                (FactoryExtended) selectedFactory,
                producers,
                this::updateFactoryInfo
        );

        revalidate();
        repaint();
    }



    void updateFactoryInfo() {
        if (selectedFactory != null) {
            factoryNameLabel.setText(selectedFactory.name);
            factoryBalanceLabel.setText(String.format("%.2f", selectedFactory.balance));
            factoryCapacityLabel.setText(Integer.toString(selectedFactory.capacity));
            factoryStockLabel.setText(Integer.toString(selectedFactory.stock));

            // Force the UI to refresh
            factoryNameLabel.repaint();
            factoryBalanceLabel.repaint();
            factoryCapacityLabel.repaint();
            factoryStockLabel.repaint();
            factoryActionsPanel.revalidate();
            factoryActionsPanel.repaint();
            editFactoryPanel.revalidate();
            editFactoryPanel.repaint();
        }
    }

    private void updateProducerSelector() {
        producerSelector.removeAllItems();
        for (Producer p : producers) {
            producerSelector.addItem(p.name);
        }
    }

    // Show the edit panel
    private void showEditPanel() {
        getContentPane().removeAll();
        getContentPane().add(editPanel);
        updateProducerInfo();
        revalidate();
        repaint();
    }

    // Add a new producer
    private void addProducer() {
        JTextField nameField = new JTextField();
        JTextField costField = new JTextField();
        JTextField priceField = new JTextField();
        JTextField capacityField = new JTextField();
        JTextField fundField = new JTextField();

        JPanel panel = new JPanel(new GridLayout(5, 2));
        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Cost:"));
        panel.add(costField);
        panel.add(new JLabel("Selling Price:"));
        panel.add(priceField);
        panel.add(new JLabel("Capacity:"));
        panel.add(capacityField);
        panel.add(new JLabel("Fund:"));
        panel.add(fundField);


        int result = JOptionPane.showConfirmDialog(null, panel, "Add Producer",
                JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            try {
                String name = nameField.getText();
                double cost = Double.parseDouble(costField.getText());
                double price = Double.parseDouble(priceField.getText());
                int capacity = Integer.parseInt(capacityField.getText());
                double fund = Double.parseDouble(fundField.getText());

                if (name.isEmpty() || cost <= 0 || price <= 0 || capacity <= 0 || fund < 0) {
                    JOptionPane.showMessageDialog(null, "Invalid input!");
                    return;
                }

                Producer producer = new Producer(name, cost, price, capacity, fund);
                producers.add(producer);
                selectedProducer = producer;
                updateProducerList();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Enter valid numbers!");
            }
        }
    }

    // Update the producer list
    private void updateProducerList() {
        JPanel listPanel = (JPanel)((JScrollPane)producerPanel.getComponent(1)).getViewport().getView();
        listPanel.removeAll();

        if (producers.isEmpty()) {
            listPanel.add(new JLabel("No producers. Add one!"));
        } else {
            ButtonGroup group = new ButtonGroup();

            for (Producer p : producers) {
                JRadioButton button = new JRadioButton(p.name);

                if (p == selectedProducer) {
                    button.setSelected(true);
                }

                button.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        selectedProducer = p;
                        // No longer auto open edit panel when clicked, just track selection
                    }
                });

                group.add(button);
                listPanel.add(button);
            }
        }

        listPanel.revalidate();
        listPanel.repaint();
    }

    // Update producer info in edit panel
    private void updateProducerInfo() {
        nameLabel.setText(selectedProducer.name);
        fundLabel.setText(Double.toString(selectedProducer.fund));
        stockLabel.setText(Double.toString(selectedProducer.stock));
        capacityLabel.setText(Integer.toString(selectedProducer.capacity));

    }
}